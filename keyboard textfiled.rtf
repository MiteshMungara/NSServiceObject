{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red43\green131\blue159;\red0\green0\blue255;\red163\green21\blue21;
\red0\green128\blue0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab674
\pard\tx674\pardeftab674\pardirnatural

\f0\fs28 \cf0 \CocoaLigature0   \cf2 CGFloat\cf0  animateDistance;
\f1\fs24 \CocoaLigature1 \

\f0\fs28 \CocoaLigature0 - (\cf3 void\cf0 )touchesBegan:(\cf2 NSSet\cf0  *)touches withEvent:(\cf2 UIEvent\cf0  *)event\
\{\
    [\cf3 self\cf0  \cf2 PickerDown\cf0 ];\
    [\cf3 self\cf0 .\cf2 view\cf0  \cf2 endEditing\cf0 :\cf3 YES\cf0 ];\
    [\cf3 super\cf0  \cf2 touchesBegan\cf0 :touches \cf2 withEvent\cf0 :event];\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1\fs24 \cf0 \CocoaLigature1 \
#pragma mark - TextFile Type\
-(BOOL)textFieldShouldReturn:(UITextField *)textField\
\{\
    [textField resignFirstResponder];\
    return YES;\
\}\
\
- (void)textFieldDidBeginEditing:(UITextField *)textField\
\{\
   [self animateTextField:textField up:YES];\
\}\
-(void)textFieldDidEndEditing:(UITextField *)textField\
\{\
    [self animateTextField:textField up:NO];\
\}\
- (void)animateTextField:(UITextField*)textField up:(BOOL)up\
\{\
    \
    CGRect frame = self.view.frame;\
    CGFloat keyboardHeight = 200.f;\
    \
    if (up)\
    \{\
        CGRect textFieldFrame = textField.frame;\
        CGFloat bottomYPos = textFieldFrame.origin.y + textFieldFrame.size.height;\
        \
        animateDistance = bottomYPos + 100 + keyboardHeight - frame.size.height;\
        if (animateDistance < 0)\
            animateDistance = 0;\
        else\
            animateDistance = fabs(animateDistance);\
    \}\
    \
    [UIView beginAnimations:nil context:NULL];\
    [UIView setAnimationBeginsFromCurrentState:YES];\
    [UIView setAnimationDuration:0.25];\
    \
    if (!(!up && frame.origin.y == 20.f)) \{\
        if (self.interfaceOrientation == UIDeviceOrientationPortrait)\
            frame.origin.y = frame.origin.y + (up ? -animateDistance : animateDistance);\
        else if (self.interfaceOrientation == UIDeviceOrientationPortraitUpsideDown)\
            frame.origin.y = frame.origin.y + (up ? animateDistance : -animateDistance);\
        self.view.frame = frame;\
    \}\
    \
    [UIView commitAnimations];\
\}\
\
\
\
\
================================================================\
TextView keyboard\
\pard\tx674\pardeftab674\pardirnatural

\f0\fs28 \cf0 \CocoaLigature0   \cf2 CGRect\cf0  screenBounds;
\f1\fs24 \CocoaLigature1 \

\f0\fs28 \cf3 \CocoaLigature0 static\cf0  \cf3 const\cf0  \cf2 CGFloat\cf0  KEYBOARD_ANIMATION_DURATION = 0.3;\
\cf3 static\cf0  \cf3 const\cf0  \cf2 CGFloat\cf0  MINIMUM_SCROLL_FRACTION = 0.2;\
\cf3 static\cf0  \cf3 const\cf0  \cf2 CGFloat\cf0  MAXIMUM_SCROLL_FRACTION = 0.8;\
\cf3 static\cf0  \cf3 const\cf0  \cf2 CGFloat\cf0  PORTRAIT_KEYBOARD_HEIGHT = 280;\
\cf3 static\cf0  \cf3 const\cf0  \cf2 CGFloat\cf0  LANDSCAPE_KEYBOARD_HEIGHT = 162;\
\

\f1\fs24 \CocoaLigature1 \

\f0\fs28 \CocoaLigature0   \cf2 UIBarButtonItem\cf0  *fixedItem = [[\cf2 UIBarButtonItem\cf0  \cf2 alloc\cf0 ] \cf2 initWithBarButtonSystemItem\cf0 :\cf2 UIBarButtonSystemItemFixedSpace\cf0  \cf2 target\cf0 :\cf3 nil\cf0  \cf2 action\cf0 :\cf3 nil\cf0 ];\
    fixedItem.\cf2 width\cf0  = \cf2 screenBounds\cf0 .\cf2 size\cf0 .\cf2 width\cf0 -80;\
    \cf2 UIToolbar\cf0 * keyboardDoneButtonView = [[\cf2 UIToolbar\cf0  \cf2 alloc\cf0 ] \cf2 init\cf0 ];\
    [keyboardDoneButtonView \cf2 sizeToFit\cf0 ];\
    \cf2 UIBarButtonItem\cf0 * doneButton = [[\cf2 UIBarButtonItem\cf0  \cf2 alloc\cf0 ] \cf2 initWithTitle\cf0 :\cf4 @"Done"\cf0 \
                                                                   \cf2 style\cf0 :\cf2 UIBarButtonItemStylePlain\cf0  \cf2 target\cf0 :\cf3 self\cf0 \
                                                                  \cf2 action\cf0 :\cf3 @selector\cf0 (doneClickedOFcpv:)];\
    \
    \
    [keyboardDoneButtonView \cf2 setItems\cf0 :[\cf2 NSArray\cf0  \cf2 arrayWithObjects\cf0 :fixedItem,doneButton, \cf3 nil\cf0 ]];\
    \cf2 tv_commentText\cf0 .\cf2 inputAccessoryView\cf0  = keyboardDoneButtonView;\
    [\cf3 self\cf0  \cf2 textviewchenge\cf0 ];\
    \cf2 tv_commentText\cf0 .\cf2 layer\cf0 .\cf2 cornerRadius\cf0  = 8;\
    \cf2 tv_commentText\cf0 .\cf2 layer\cf0 .\cf2 borderWidth\cf0  = 2;\
    \cf2 tv_commentText\cf0 .\cf2 layer\cf0 .\cf2 borderColor\cf0  = [[\cf2 UIColor\cf0  \cf2 colorWithRed\cf0 :240/255.0 \cf2 green\cf0 :151/255.0 \cf2 blue\cf0 :30/255.0 \cf2 alpha\cf0 :1]\cf2 CGColor\cf0 ];\
    \
\}\
\
- (\cf3 void\cf0 )didReceiveMemoryWarning \{\
    [\cf3 super\cf0  \cf2 didReceiveMemoryWarning\cf0 ];\
    \cf5 // Dispose of any resources that can be recreated.\cf0 \
\}\
\
-(\cf3 void\cf0 )textviewchenge\{\
    \
    \cf2 NSString\cf0  *deviceType = [\cf2 UIDevice\cf0  \cf2 currentDevice\cf0 ].\cf2 model\cf0 ;\
    \cf2 NSLog\cf0 (\cf4 @"iphone %@"\cf0 ,deviceType);\
    \cf3 if\cf0 ([deviceType \cf2 isEqualToString\cf0 :\cf4 @"iPhone"\cf0 ])\
    \{\
        [\cf2 tv_commentText\cf0  \cf2 setText\cf0 :\cf4 @"Consulation Notes"\cf0 ];\
        [\cf2 tv_commentText\cf0  \cf2 setFont\cf0 :[\cf2 UIFont\cf0  \cf2 fontWithName\cf0 :\cf4 @"HelveticaNeue"\cf0  \cf2 size\cf0 :14]];\
        [\cf2 tv_commentText\cf0  \cf2 setTextColor\cf0 :[\cf2 UIColor\cf0  \cf2 lightGrayColor\cf0 ]];\
        [\cf2 tv_commentText\cf0  \cf2 scrollRangeToVisible\cf0 :\cf2 NSMakeRange\cf0 (0, 0)];\
        \
    \}\
    \cf3 else\cf0  \cf3 if\cf0 ([deviceType \cf2 isEqualToString\cf0 :\cf4 @"iPhone Simulator"\cf0 ])\
    \{\
        \
        [\cf2 tv_commentText\cf0  \cf2 setText\cf0 :\cf4 @"Consulation Notes"\cf0 ];\
        [\cf2 tv_commentText\cf0  \cf2 setFont\cf0 :[\cf2 UIFont\cf0  \cf2 fontWithName\cf0 :\cf4 @"HelveticaNeue"\cf0  \cf2 size\cf0 :14]];\
        [\cf2 tv_commentText\cf0  \cf2 setTextColor\cf0 :[\cf2 UIColor\cf0  \cf2 lightGrayColor\cf0 ]];\
        [\cf2 tv_commentText\cf0  \cf2 scrollRangeToVisible\cf0 :\cf2 NSMakeRange\cf0 (0, 0)];\
        \
    \}\
    \cf3 else\cf0 \
    \{\
        \
        [\cf2 tv_commentText\cf0  \cf2 setText\cf0 :\cf4 @"Consulation Notes"\cf0 ];\
        [\cf2 tv_commentText\cf0  \cf2 setFont\cf0 :[\cf2 UIFont\cf0  \cf2 fontWithName\cf0 :\cf4 @"HelveticaNeue"\cf0  \cf2 size\cf0 :20]];\
        [\cf2 tv_commentText\cf0  \cf2 setTextColor\cf0 :[\cf2 UIColor\cf0  \cf2 lightGrayColor\cf0 ]];\
        [\cf2 tv_commentText\cf0  \cf2 scrollRangeToVisible\cf0 :\cf2 NSMakeRange\cf0 (0, 0)];\
    \}\
    \
    \
\}\
\
-(\cf3 void\cf0 ) textViewDidBeginEditing:(\cf2 UITextView\cf0  *)textView\
\{\
    \cf2 NSString\cf0  *deviceType = [\cf2 UIDevice\cf0  \cf2 currentDevice\cf0 ].\cf2 model\cf0 ;\
    \cf2 NSLog\cf0 (\cf4 @"iphone %@"\cf0 ,deviceType);\
    \cf3 if\cf0 ([deviceType \cf2 isEqualToString\cf0 :\cf4 @"iPhone"\cf0 ])\
    \{\
        \
        \cf3 if\cf0  ([textView.\cf2 text\cf0  \cf2 isEqual\cf0 :\cf4 @"Consulation Notes"\cf0 ])\
        \{\
            \cf2 tv_commentText\cf0 .\cf2 text\cf0  = \cf4 @""\cf0 ;\
            \cf2 tv_commentText\cf0 .\cf2 textColor\cf0  = [\cf2 UIColor\cf0  \cf2 blackColor\cf0 ];\
            \
        \}\
    \}\
    \cf3 else\cf0 \
    \{\
        \
        \cf3 if\cf0  ([textView.\cf2 text\cf0  \cf2 isEqual\cf0 :\cf4 @"Consulation Notes"\cf0 ])\
        \{\
            \cf2 tv_commentText\cf0 .\cf2 text\cf0  = \cf4 @""\cf0 ;\
            \cf2 tv_commentText\cf0 .\cf2 textColor\cf0  = [\cf2 UIColor\cf0  \cf2 blackColor\cf0 ];\
            \
        \}\
    \}\
    \
    \
    \cf2 CGRect\cf0  textFieldRect = [\cf3 self\cf0 .\cf2 view\cf0 .\cf2 window\cf0  \cf2 convertRect\cf0 :textView.\cf2 bounds\cf0  \cf2 fromView\cf0 :textView];\
    \cf2 CGRect\cf0  viewRect = [\cf3 self\cf0 .\cf2 view\cf0 .\cf2 window\cf0  \cf2 convertRect\cf0 :\cf3 self\cf0 .\cf2 view\cf0 .\cf2 bounds\cf0  \cf2 fromView\cf0 :\cf3 self\cf0 .\cf2 view\cf0 ];\
    \
    \cf2 CGFloat\cf0  midline = textFieldRect.\cf2 origin\cf0 .\cf2 y\cf0  + 0.5 * textFieldRect.\cf2 size\cf0 .\cf2 height\cf0 ;\
    \cf2 CGFloat\cf0  numerator = midline - viewRect.\cf2 origin\cf0 .\cf2 y\cf0  - \cf2 MINIMUM_SCROLL_FRACTION\cf0  * viewRect.\cf2 size\cf0 .\cf2 height\cf0 ;\
    \cf2 CGFloat\cf0  denominator = (\cf2 MAXIMUM_SCROLL_FRACTION\cf0  - \cf2 MINIMUM_SCROLL_FRACTION\cf0 ) * viewRect.\cf2 size\cf0 .\cf2 height\cf0 ;\
    \cf2 CGFloat\cf0  heightFraction = numerator / denominator;\
    \
    \cf3 if\cf0 (heightFraction < 0.0)\{\
        \
        heightFraction = 0.0;\
        \
    \}\cf3 else\cf0  \cf3 if\cf0 (heightFraction > 1.0)\{\
        \
        heightFraction = 1.0;\
    \}\
    \cf2 UIInterfaceOrientation\cf0  orientation = [[\cf2 UIApplication\cf0  \cf2 sharedApplication\cf0 ] \cf2 statusBarOrientation\cf0 ];\
    \
    \cf3 if\cf0 (orientation == \cf2 UIInterfaceOrientationPortrait\cf0  || orientation == \cf2 UIInterfaceOrientationPortraitUpsideDown\cf0 )\{\
        \
        \cf2 animateDistance\cf0  = \cf2 floor\cf0 (\cf2 PORTRAIT_KEYBOARD_HEIGHT\cf0  * heightFraction);\
        \
    \}\cf3 else\cf0 \{\
        \
        \cf2 animateDistance\cf0  = \cf2 floor\cf0 (\cf2 LANDSCAPE_KEYBOARD_HEIGHT\cf0  * heightFraction);\
    \}\
    \
    \cf2 CGRect\cf0  viewFrame = \cf3 self\cf0 .\cf2 view\cf0 .\cf2 frame\cf0 ;\
    viewFrame.\cf2 origin\cf0 .\cf2 y\cf0  -= \cf2 animateDistance\cf0 ;\
    \
    [\cf2 UIView\cf0  \cf2 beginAnimations\cf0 :\cf3 nil\cf0  \cf2 context\cf0 :\cf3 NULL\cf0 ];\
    [\cf2 UIView\cf0  \cf2 setAnimationBeginsFromCurrentState\cf0 :\cf3 YES\cf0 ];\
    [\cf2 UIView\cf0  \cf2 setAnimationDuration\cf0 :\cf2 KEYBOARD_ANIMATION_DURATION\cf0 ];\
    \
    [\cf3 self\cf0 .\cf2 view\cf0  \cf2 setFrame\cf0 :viewFrame];\
    \
    [\cf2 UIView\cf0  \cf2 commitAnimations\cf0 ];\
\}\
- (\cf3 void\cf0 )textViewDidEndEditing:(\cf2 UITextView\cf0  *)textView\
\{\
    \cf2 CGRect\cf0  viewFrame = \cf3 self\cf0 .\cf2 view\cf0 .\cf2 frame\cf0 ;\
    viewFrame.\cf2 origin\cf0 .\cf2 y\cf0  += \cf2 animateDistance\cf0 ;\
    [\cf2 UIView\cf0  \cf2 beginAnimations\cf0 :\cf3 nil\cf0  \cf2 context\cf0 :\cf3 NULL\cf0 ];\
    [\cf2 UIView\cf0  \cf2 setAnimationBeginsFromCurrentState\cf0 :\cf3 YES\cf0 ];\
    [\cf2 UIView\cf0  \cf2 setAnimationDuration\cf0 :\cf2 KEYBOARD_ANIMATION_DURATION\cf0 ];\
    \
    [\cf3 self\cf0 .\cf2 view\cf0  \cf2 setFrame\cf0 :viewFrame];\
    [\cf2 UIView\cf0  \cf2 commitAnimations\cf0 ];\
    \
    \cf2 NSString\cf0  *deviceType = [\cf2 UIDevice\cf0  \cf2 currentDevice\cf0 ].\cf2 model\cf0 ;\
    \cf2 NSLog\cf0 (\cf4 @"iphone %@"\cf0 ,deviceType);\
    \cf3 if\cf0 ([deviceType \cf2 isEqualToString\cf0 :\cf4 @"iPhone"\cf0 ])\
    \{\
        \cf3 if\cf0 (\cf2 tv_commentText\cf0 .\cf2 text\cf0 .\cf2 length\cf0  == 0)\{\
            \cf2 tv_commentText\cf0 .\cf2 textColor\cf0  = [\cf2 UIColor\cf0  \cf2 lightGrayColor\cf0 ];\
            \cf2 tv_commentText\cf0 .\cf2 text\cf0  = \cf4 @"Consulation Notes"\cf0 ;\
            [\cf2 tv_commentText\cf0  \cf2 resignFirstResponder\cf0 ];\
        \}\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf3 if\cf0 (\cf2 tv_commentText\cf0 .\cf2 text\cf0 .\cf2 length\cf0  == 0)\{\
            \cf2 tv_commentText\cf0 .\cf2 textColor\cf0  = [\cf2 UIColor\cf0  \cf2 lightGrayColor\cf0 ];\
            \cf2 tv_commentText\cf0 .\cf2 text\cf0  = \cf4 @"Consulation Notes"\cf0 ;\
            [\cf2 tv_commentText\cf0  \cf2 resignFirstResponder\cf0 ];\
        \}\
        \
        \
    \}\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1\fs24 \cf0 \CocoaLigature1 \
}